import java.util.Calendar
import java.util.regex.Pattern

class MainClass {
    val opcion:Int? = null;
    val menu = MenuPrincipal()
    fun main(args: Array<String>) {
        do{
            menu.mostrarMenu()
            menu.leerOpcionMenu()
            if(opcion==7){
                println("Gracias por usar el programa")
            }
        }while(opcion!=7)
    }


}
MainClass().main(arrayOf(""))

class MenuPrincipal{
    fun mostrarMenu(){
        println("===========Menu Principal===========")
        println("1..........Cobrar ENEE")
        println("2..........Cobrar SANAA")
        println("3..........Recargar TIGO")
        println("4..........Recargar CLARO")
        println("5..........Debitar Cuenta")
        println("6..........Acreditar Cuenta")
        println("7..........Salir")
    }

    fun leerOpcionMenu(){
        var opcionMenu:Any?
        opcionMenu = readLine().toString()
        while(validarNumero(opcionMenu.toString())){
            if(opcionMenu.toInt()==1){
                val cobrosENEE = CobrosENEE()
                println("Menu ENEE")
                cobrosENEE.cobroEnee()
                break
            }
            if(opcionMenu.toInt()==2){
                val cobrosSANAA = CobrosSANAA()
                println("Menu SANAA")
                cobrosSANAA.cobroSANAA()
                break
            }
            if(opcionMenu.toInt()==3){
                val recargasTigo = RecargasTigo()
                println("Recargas Tigo")
                recargasTigo.menuPrincipalTigo()
                break
            }
            if(opcionMenu.toInt()==4){
                val recargasClaro = RecargasClaro()
                println("Recargas Claro")
                recargasClaro.menuPrincipalClaro()
                break
            }
            if(opcionMenu.toInt()==5){
                var  debitar = DebitarCuenta()
                debitar.ingresarCuenta()
                break

            }
            if(opcionMenu.toInt()==6){
                var  acreditar = AcreditarCuenta()
                acreditar.agregarCuenta()
                break

            }
        }
    }


    fun validarNumero(texto:String):Boolean{
        try {
            texto.toInt()
            return true
        }catch (e:Exception){
            println("Solo se permiten números \n")
            return false;
        }
    }

}

class CobrosENEE(){
    var nombreCliente: String           = ""
    var direccionCliente: String        = ""
    var codigoCliente: String           = ""
    val diasFacturados:Int              = 30
    var consumoCliente: Any             = 0.0
    var totalAPagarCliente: Any         = 0.0
    val primeraTarifa:Double            = 3.3657
    val segundaTarifa:Double            = 4.4082
    var numeroFactura:Int               = 0
    var nuevoRecibo:Boolean             = false;

    fun ingresarDatosENEE(){
        println("Ingrese por favor el nombre del cliente")
        nombreCliente = readLine().toString()
        while(!validarTexto(nombreCliente)){
            println("Ingrese por favor el nombre del cliente")
            nombreCliente = readLine().toString()
        }
        println("Ingrese por favor la dirección del cliente")
        direccionCliente = readLine().toString()
        println("Ingrese por favor el código del cliente")
        codigoCliente = readLine().toString()
        while(codigoCliente.length != 7){
            println("La longitud del código de cliente debe ser de 7 dígitos")
            codigoCliente = readLine().toString()
        }
        while(!validarNumero(codigoCliente)){
            codigoCliente = readLine().toString()
        }
        println("Ingrese el consumo del cliente en kWh")
        consumoCliente = readLine().toString()
        while(!validarNumero(consumoCliente.toString())){
            println("")
            consumoCliente = readLine().toString()
        }
        if(esNegativo(consumoCliente.toString().toDouble())){
            println("El consumo no puede ser menor a 0 kWh")
            consumoCliente = readLine().toString()
            while(!validarNumero(consumoCliente.toString())){
                consumoCliente = readLine().toString()
            }
        }
        totalAPagarCliente = procesarConsumo(primeraTarifa,segundaTarifa,consumoCliente.toString().toDouble())
        numeroFactura++
    }

    fun cobroEnee() {
        do{
            if(numeroFactura>0 && nuevoRecibo ==false){
                return
            }
            ingresarDatosENEE()
            imprimirFactura()
            if(numeroFactura> 0){
                generarOtroCobro()
            }
            cobroEnee()
        }while(nuevoRecibo==true)
    }

    fun generarOtroCobro(){
        var otroCobro: String
        println("¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
        otroCobro = readLine().toString()
        while(!validarTexto(otroCobro)){
            println("¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
            otroCobro = readLine().toString()
        }
        while (!validarYN(otroCobro)){
            println("dd¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
            otroCobro = readLine().toString()
        }
        if(otroCobro.equals("Y") || otroCobro.equals("y")){
            cobroEnee()
            nuevoRecibo = true
        }
        else if (otroCobro.equals("N") || otroCobro.equals("n")){
            nuevoRecibo = false
        }
    }

    fun validarYN(texto:String):Boolean{
        if(texto.equals("Y") || texto.equals("y")){
            return true
        }else if(texto.equals("N") || texto.equals("n")){
            return true
        }
        return false
    }

    fun procesarConsumo(tarifa1:Double, tarifa2:Double, consumo:Double):Double{
        var consumoFinal:Double = 0.0
        if(consumo < 50){
            consumoFinal = consumo * tarifa1
        }else if(consumo > 50){
            var consumoTarifa2:Double
            consumoTarifa2 = consumo - 50
            consumoFinal = consumoTarifa2 * tarifa2
            consumoFinal+= (50*tarifa1)
        }
        return consumoFinal
    }

    fun imprimirFactura(){
        println("===========================================")
        println("=================FACTURA===================")
        println("Nombre del cliente: "+this.nombreCliente)
        println("Número de factura: "+this.numeroFactura)
        println("Código del cliente: "+this.codigoCliente)
        println("Dirección del cliente: "+ this.direccionCliente)
        println("Días facturados: "+this.diasFacturados)
        println("Consumo del cliente: "+this.consumoCliente + " m³")
        println("Total a pagar: "+this.totalAPagarCliente + " L")
        println("==================FINAL===================")
        println("========================================== \n")
    }

    fun esNegativo(numero:Double):Boolean{
        if(numero < 0){
            return true
        }
        return false
    }
    fun validarTexto(texto:String):Boolean{
        var c:Char
        for(i in 1..texto.length-1){
            c = texto.get(i)
            if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ')) {
                println("Este texto contiene números, sólo se permiten letras.")
                return false;
            }
        }
        return true
    }
    fun validarNumero(texto:String):Boolean{
        try {
            texto.toInt()
            return true
        }catch (e:Exception){
            println("Solo se permiten números")
            return false;
        }
    }
}

class CobrosSANAA(){
    var nombreCliente: String           = ""
    var direccionCliente: String        = ""
    var codigoComercial: String         = ""
    var consumoCliente:Any              = 0
    var totalAPagarCliente: Any         = 0.0
    val tarifa:Double                   = 3.17
    var periodoPago:String              = ""
    var numeroFactura:Int               = 0
    var nuevoRecibo:Boolean             = false;

    fun ingresarDatosSANAA(){
        println("Ingrese por favor el nombre del cliente")
        nombreCliente = readLine().toString()
        while(!validarTexto(nombreCliente)){
            println("Ingrese por favor el nombre del cliente")
            nombreCliente = readLine().toString()
        }
        println("Ingrese por favor la dirección del cliente")
        direccionCliente = readLine().toString()
        println("Ingrese por favor el código comercial del cliente")
        codigoComercial = readLine().toString()
        while(codigoComercial.length != 10){
            println("La longitud del código comercial debe ser de 10 dígitos")
            codigoComercial = readLine().toString()
        }
        while(!validarNumero(codigoComercial)){
            codigoComercial = readLine().toString()
        }
        println("Ingrese el consumo del cliente en m³")
        consumoCliente = readLine().toString()
        while(!validarNumero(consumoCliente.toString())){
            println("")
            consumoCliente = readLine().toString()
        }
        if(esNegativo(consumoCliente.toString().toDouble())){
            println("El consumo no puede ser menor a 0 m³")
            consumoCliente = readLine().toString()
            while(!validarNumero(consumoCliente.toString())){
                consumoCliente = readLine().toString()
            }
        }
        val f: Calendar = Calendar.getInstance()
        val mes = f[Calendar.MONTH] + 1
        val año = f[Calendar.YEAR]
        if(mes < 10){
            periodoPago = año.toString() + "/0" + mes.toString()
        }
        if(mes >= 10){
            periodoPago = año.toString() + "/" + mes.toString()
        }

        totalAPagarCliente = (consumoCliente.toString().toDouble() * tarifa)
        numeroFactura++
    }

    fun cobroSANAA() {
        do{
            if(numeroFactura>0 && nuevoRecibo ==false){
                return
            }
            ingresarDatosSANAA()
            imprimirFactura()
            if(numeroFactura> 0){
                generarOtroCobro()
            }
            cobroSANAA()
        }while(nuevoRecibo==true)
    }

    fun generarOtroCobro(){
        var otroCobro: String
        println("¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
        otroCobro = readLine().toString()
        while(!validarTexto(otroCobro)){
            println("¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
            otroCobro = readLine().toString()
        }
        while (!validarYN(otroCobro)){
            println("dd¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
            otroCobro = readLine().toString()
        }
        if(otroCobro.equals("Y") || otroCobro.equals("y")){
            cobroSANAA()
            nuevoRecibo = true
        }
        else if (otroCobro.equals("N") || otroCobro.equals("n")){
            nuevoRecibo = false
        }
    }

    fun validarYN(texto:String):Boolean{
        if(texto.equals("Y") || texto.equals("y")){
            return true
        }else if(texto.equals("N") || texto.equals("n")){
            return true
        }
        return false
    }


    fun imprimirFactura(){
        println("===========================================")
        println("=================FACTURA===================")
        println("Nombre del cliente: "+this.nombreCliente)
        println("Número de factura: "+this.numeroFactura)
        println("Código del cliente: "+this.codigoComercial)
        println("Dirección del cliente: "+ this.direccionCliente)
        println("Período: "+this.periodoPago)
        println("Consumo del cliente: "+this.consumoCliente + " kWh")
        println("Total a pagar: "+this.totalAPagarCliente + " L")
        println("==================FINAL===================")
        println("========================================== \n")
    }

    fun esNegativo(numero:Double):Boolean{
        if(numero < 0){
            return true
        }
        return false
    }
    fun validarTexto(texto:String):Boolean{
        var c:Char
        for(i in 1..texto.length-1){
            c = texto.get(i)
            if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ')) {
                println("Este texto contiene números, sólo se permiten letras.")
                return false;
            }
        }
        return true
    }
    fun validarNumero(texto:String):Boolean{
        try {
            texto.toInt()
            return true
        }catch (e:Exception){
            println("Solo se permiten números")
            return false;
        }
    }
}

class AcreditarCuenta():DebitarCuenta(){


    fun agregarCuenta(){
        println("Ingrese El número de cuenta orígen, para acreditar")
        cuentaOrigen= readLine().toString()

        while(cuentaOrigen.length != 10){
            println("# Incorrecto # Ingrese tienen que ser 10 digitos")
            cuentaOrigen= readLine().toString()
        }

        do{
            if(contador2 > 1){
                saldoActual= totalSaldo
                println("###SALDOOO ACTUAL### $saldoActual")
            }

            println("Ingrese el Monto a Acreditar")
            monto = readLine().toString().toDouble()

            while(validacionMaxima2(monto.toString().toDouble())) {
                monto = readLine().toString().toDouble()

            }

            while (menorZero(monto.toString().toDouble())) {
                println("El monto que desea ingresar es equivocado, deberá ser mayor a 0")
                monto = readLine().toString().toDouble()
                while (validacionMaxima2(monto.toString().toDouble())) {
                    monto = readLine().toString().toDouble()
                }
            }


            totalSaldo= saldoActual+monto as Double
            println("*********************************************************")
            println("**********Su monto actual es de $totalSaldo **********")
            println("*********************************************************")
            println("¿Desea continuar acreditando?")
            println("Poner '1' si desea seguir ")
            println("Poner '0' quiere terminar el proceso")
            contador = readLine().toString().toInt()
            if(contador==0){
                return
            }

            while(contador >2){
                println("La opción que ingresó es equivocada, vuelva a ingresar una opción")
                println("*********************************************************")
                println("¿Desea continuar acreditando?")
                println("Poner '1' si desea seguir ")
                println("Poner '0' quiere terminar el proceso")
                contador = readLine().toString().toInt()
            }
            if (contador == 1){
                contador2++
            }else{
                if(contador == 0){
                    contador2 = 1}else{
                    while(!validarNumero(contador as String)){
                        println("SOLO ACEPTA NUMEROS")
                        contador = readLine().toString().toInt()
                    }

                }

            }


        }while(contador!=1 || contador!=0)

    }
    fun validacionMaxima2(monto:Double):Boolean{

        if(monto > 10000){
            println("El monto que quiere acreditar supera el límite de Lps.10,000")
            return true
        }
        return false
    }


}

open class DebitarCuenta(){
    var cuentaOrigen: String = ""
    var monto :Double = 0.0
    val montoMaximo:Int = 5000
    val montoMinimo:Int=0
    var totalSaldo:Double = 0.0
    var contador:Int = 1
    var saldoActual:Double = 10000.0
    var contador2:Int =1

    fun ingresarCuenta(){

        println("Ingrese El número de cuenta origen")
        cuentaOrigen= readLine().toString()

        while(cuentaOrigen.length != 10){
            println("#Incorrecto#:  Ingrese tienen que ser 10 dígitos númericos")
            cuentaOrigen= readLine().toString()
        }

        do{
            if(contador2 > 1){
                saldoActual= totalSaldo
                println("###SALDOOO ACTUAL### $saldoActual")
            }

            println("Ingrese el Monto a Debitar")

            try{

                monto = readLine().toString().toDouble()
            }catch (e:Exception) {
                var a = e.toString().contains(other = "java.lang.NumberFormatException")
                println("############  ERROR NO SE ACEPTAN LETRAS, VOLVER A INGRESAR A LA TRANSACCION  ############")

                break
            }

            while(validacionMaxima(monto.toString().toDouble())) {
                monto = readLine().toString().toDouble()

            }



            while (menorZero(monto.toString().toDouble())) {
                println("El monto que desea ingresar es equivocado, deberá ser mayor a 0")
                monto = readLine().toString().toDouble()
                while (validacionMaxima(monto.toString().toDouble())) {
                    monto = readLine().toString().toDouble()
                }
            }


            /*validacionSaldoActual(monto.toString().toDouble())*/
            while ( saldoActual < monto ){
                println("El monto que ingresó es mayor al del saldo actual : $saldoActual")

                println("-Monto incorrecto- Ingrese de nuevo el monto")
                monto = readLine().toString().toDouble()

                if(monto >5000){
                    println("El monto excede el límite de débito de 5000, Ingresar el monto")
                }

                while (menorZero(monto.toString().toDouble())) {
                    println("El monto que desea ingresar es equivocado, deberá ser mayor a 0")
                    monto = readLine().toString().toDouble()
                    while (validacionMaxima(monto.toString().toDouble())) {
                        monto = readLine().toString().toDouble()
                    }
                }


                if(saldoActual>= monto){
                    totalSaldo= saldoActual-monto
                    println("Su monto actual es de $totalSaldo")
                }


            }
            totalSaldo= saldoActual-monto
            if (totalSaldo==0.0){
                println("*********************************************************")
                println("**********Su monto actual es de $totalSaldo **********")
                println("**********************SESION FINALIZADA*********************")
                contador=0
                contador2=1
                break
            }
            println("*********************************************************")
            println("**********Su monto actual es de $totalSaldo **********")
            println("*********************************************************")
            println("¿Desea continuar debitando?")
            println("Poner '1' si desea seguir ")
            println("Poner '0' quiere terminar el proceso")
            contador = readLine().toString().toInt()
            if(contador ==0){
                return
            }
            while(contador >2){
                println("La opción que ingresó es equivocada, vuelva a ingresar una opción")
                println("*********************************************************")
                println("¿Desea continuar debitando?")
                println("Poner '1' si desea seguir ")
                println("Poner '0' quiere terminar el proceso")
                contador = readLine().toString().toInt()

            }


            if (contador == 1){
                contador2++
            }else{
                if(contador == 0){
                    contador2 = 1}else{
                    println("SOLO ACEPTA NUMEROS")
                    soloNumero(contador)


                }

            }

        }while(contador!=1 || contador!=0)




    }
    fun validarNumero(texto:Any):Boolean {
        try {
            monto.toDouble()
        } catch (e: Exception) {
            //var a = e.toString().contains(other = "java.lang.NumberFormatException")
            println("############  ERROR NO SE ACEPTAN LETRAS, VOLVER A INGRESAR A LA TRANSACCION  ############")

            return false

        }
        return true
    }

    fun soloNumero(contador:Int){
        var letras= contador.toString()
        var letras2 = letras.contains(other = "A")
        println(letras2)

    }
    fun menorZero(monto:Double):Boolean{
        if(monto <= 0){

            return true
        }
        return false
    }



    fun validacionMaxima(monto:Double):Boolean{

        if(monto > 5000){
            println("El monto que quiere debitar supera el límite de Lps.5,000")
            return true
        }
        return false
    }
}

class RecargasTigo {

    fun validarClaro(texto: String):Boolean {
        if (texto.length == 8) {
            var pattern = Pattern.compile("9")
            var matcher = pattern.matcher(texto.substring(0, 1))
            if(matcher.matches()){
                return true
            }
            println("Los números de Tigo solo pueden comenzar con 9")
            return false
        }
        println("El número debe ser de 8 dígitos")
        return false
    }

    fun ingresoNumero() {
        println("Ingrese su numero de celular")
        var numeroCelular: Any
        numeroCelular = readLine().toString()
        while(!validarClaro(numeroCelular.toString())){
            numeroCelular = readLine().toString()
        }
    }

    fun montosRecargas() {
        println("Montos de Recarga")
        println("1.LPS.15")
        println("2.LPS.25")
        println("3.LPS.50")
        println("4.LPS.100")
        println("5.LPS.150")
        println("6.LPS.250")
        println("Seleccione una opcion")
    }

     fun recargarTigo(){
         ingresoNumero()
        montosRecargas()
        leerOpcionMenuRecarga()
    }

    fun superRecargarTigo(){
        ingresoNumero()
        mostrarMenuSuperRecarga()
        leerOpcionMenuRecarga()
    }

    fun menuPrincipalTigo(){
        mostrarMenuPrincipalTigo()
        leerOpcionMenuPrincipal()
    }

    fun mostrarMenuSuperRecarga(){
        println("Montos de Super Recarga")
        println("1.LPS.25")
        println("2.LPS.50")
        println("3.LPS.100")
        println("Seleccione una opcion")
    }

    fun mostrarMenuPrincipalTigo(){
        println("Montos de Recarga")
        println("1.Recarga normal")
        println("2.Super recarga")
        println("Seleccione una opcion")
    }

    fun leerOpcionMenuPrincipal() {
        var opcionMenu: Any?
        opcionMenu = readLine().toString()
        while (validarNumero(opcionMenu.toString())) {
            if (opcionMenu.toString().toInt() == 1) {
                recargarTigo()
                break
            }
            if (opcionMenu.toString().toInt() == 2) {
                superRecargarTigo()
                break
            }
        }
    }

    fun leerOpcionMenuSuperRecarga() {
        var opcionMenu: Any?
        opcionMenu = readLine().toString()
        while (validarNumero(opcionMenu.toString())) {
            if (opcionMenu.toString().toInt() == 1) {
                val recargas = RecargasTigo()
                println("1.LPS.25, Super Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 2) {
                println("2.LPS.50, Super Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 3) {
                println("3.LPS.100, Super Recarga realizada con exito ")
                break
            }
        }
    }
    fun leerOpcionMenuRecarga() {
        var opcionMenu: Any?
        opcionMenu = readLine().toString()
        while (validarNumero(opcionMenu.toString())) {
            if (opcionMenu.toString().toInt() == 1) {
                val recargas = RecargasTigo()
                println("1.LPS.15, Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 2) {
                println("2.LPS.25, Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 3) {
                println("3.LPS.50, Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 4) {
                println("4.LPS.100, Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 5) {
                println("5.LPS.150, Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 6) {
                println("6.LPS.250, Recarga realizada con exito ")
                break
            }
        }

    }

    fun validarNumero(texto: String): Boolean {
        try {
            texto.toInt()
            return true
        } catch (e: Exception) {
            println("Solo se permiten números \n")
            return false;
        }
    }
}

class RecargasClaro {

    fun validarClaro(texto: String):Boolean {
        if (texto.length == 8) {
            var pattern = Pattern.compile("38")
            var matcher = pattern.matcher(texto.substring(0, 1))
            if(matcher.matches()){
                return true
            }
            println("Los números de Claro solo pueden comenzar con 3 o con 8")
            return false
        }
        println("El número debe ser de 8 dígitos")
        return false
    }

    fun ingresoNumero() {
        println("Ingrese su numero de celular")
        var numeroCelular: Any
        numeroCelular = readLine().toString()
        while(!validarClaro(numeroCelular.toString())){
            numeroCelular = readLine().toString()
        }
    }

    fun recargarClaro(){
        ingresoNumero()
        montosRecargas()
        leerOpcionMenuRecarga()
    }

    fun superRecargarClaro(){
        ingresoNumero()
        mostrarMenuSuperRecarga()
        leerOpcionMenuRecarga()
    }

    fun menuPrincipalClaro(){
        mostrarMenuPrincipalTigo()
        leerOpcionMenuPrincipal()
    }

    fun mostrarMenuSuperRecarga(){
        println("Montos de Super Recarga")
        println("1.LPS.25")
        println("2.LPS.50")
        println("3.LPS.100")
        println("Seleccione una opcion")
    }

    fun mostrarMenuPrincipalTigo(){
        println("Montos de Recarga")
        println("1.Recarga normal")
        println("2.Super recarga")
        println("Seleccione una opcion")
    }

    fun leerOpcionMenuPrincipal() {
        var opcionMenu: Any?
        opcionMenu = readLine().toString()
        while (validarNumero(opcionMenu.toString())) {
            if (opcionMenu.toString().toInt() == 1) {
                recargarClaro()
                break
            }
            if (opcionMenu.toString().toInt() == 2) {
                superRecargarClaro()
                break
            }
        }
    }

    fun montosRecargas() {
        println("Montos de Recarga")
        println("1.LPS.15")
        println("2.LPS.25")
        println("3.LPS.50")
        println("4.LPS.100")
        println("5.LPS.150")
        println("6.LPS.250")
        println("Seleccione una opcion")

    }

    fun leerOpcionMenuSuperRecarga() {
        var opcionMenu: Any?
        opcionMenu = readLine().toString()
        while (validarNumero(opcionMenu.toString())) {
            if (opcionMenu.toString().toInt() == 1) {
                val recargas = RecargasTigo()
                println("1.LPS.25, Super Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 2) {
                println("2.LPS.50, Super Recarga realizada con exito ")
                break
            }
            if (opcionMenu.toString().toInt() == 3) {
                println("3.LPS.100, Super Recarga realizada con exito ")
                break
            }
        }
    }

    fun leerOpcionMenuRecarga() {
        var opcion: Any?
        opcion = readLine().toString()
        while (validarNumero(opcion.toString())) {
            if (opcion.toInt() == 1) {
                val recargas = RecargasClaro()
                println("1.LPS.15, Recarga realizada con exito ")
                break
            }
            if (opcion.toInt() == 2) {
                println("2.LPS.25, Recarga realizada con exito ")
                break
            }
            if (opcion.toInt() == 3) {
                println("3.LPS.50, Recarga realizada con exito ")
                break
            }
            if (opcion.toInt() == 4) {
                println("4.LPS.100, Recarga realizada con exito ")
                break
            }
            if (opcion.toInt() == 5) {
                println("5.LPS.150, Recarga realizada con exito ")
                break
            }
            if (opcion.toInt() == 6) {
                println("6.LPS.250, Recarga realizada con exito ")
                break
            }
        }


    }

    fun validarNumero(texto: String): Boolean {
        try {
            texto.toInt()
            return true
        } catch (e: Exception) {
            println("Solo se permiten números \n")
            return false;
        }
    }
    fun validarlongCel  ()

    {

    }

}