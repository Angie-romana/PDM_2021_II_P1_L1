class MainClass {
    val opcion:Int? = null;
    val menu = MenuPrincipal()
    fun main(args: Array<String>) {
        do{
            menu.mostrarMenu()
            menu.leerOpcionMenu()
            if(opcion==7){
                println("Gracias por usar el programa")
            }
        }while(opcion!=7)
    }


}
MainClass().main(arrayOf(""))

class MenuPrincipal{
    fun mostrarMenu(){
        println("===========Menu Principal===========")
        println("1..........Cobrar ENEE")
        println("2..........Cobrar SANAA")
        println("3..........Recargar TIGO")
        println("4..........Recargar CLARO")
        println("5..........Debitar Cuenta")
        println("6..........Acreditar Cuenta")
        println("7..........Salir")
    }

    fun leerOpcionMenu(){
        var opcionMenu:Any?
        opcionMenu = readLine().toString()
        while(validarNumero(opcionMenu.toString())){
            if(opcionMenu.toInt()==1){
                val cobrosENEE = CobrosENEE()
                println("Menu ENEE")
                cobrosENEE.cobroEnee()
                break
            }
            if(opcionMenu.toInt()==2){
                println("Menu SANAA")
                return
            }
        }
    }


    fun validarNumero(texto:String):Boolean{
        try {
            texto.toInt()
            return true
        }catch (e:Exception){
            println("Solo se permiten números \n")
            return false;
        }
    }

}

class CobrosENEE(){
    var nombreCliente: String           = ""
    var direccionCliente: String        = ""
    var codigoCliente: String           = ""
    val diasFacturados:Int              = 30
    var consumoCliente: Any             = 0.0
    var totalAPagarCliente: Any         = 0.0
    val primeraTarifa:Double            = 15.2
    val segundaTarifa:Double            = 18.6
    var numeroFactura:Int               = 0
    var contador                        = 0
    var nuevoRecibo:Boolean             = false;

    fun ingresarDatosENEE(){
        println("Ingrese por favor el nombre del cliente")
        nombreCliente = readLine().toString()
        while(!validarTexto(nombreCliente)){
            println("Ingrese por favor el nombre del cliente")
            nombreCliente = readLine().toString()
        }
        println("Ingrese por favor la dirección del cliente")
        direccionCliente = readLine().toString()
        println("Ingrese por favor el código del cliente")
        codigoCliente = readLine().toString()
        while(codigoCliente.length != 7){
            println("La longitud del código de cliente debe ser de 7 dígitos")
            codigoCliente = readLine().toString()
        }
        while(!validarNumero(codigoCliente)){
            codigoCliente = readLine().toString()
        }
        println("Ingrese el consumo del cliente en kWh")
        consumoCliente = readLine().toString()
        while(!validarNumero(consumoCliente.toString())){
            println("")
            consumoCliente = readLine().toString()
        }
        if(esNegativo(consumoCliente.toString().toDouble())){
            println("El consumo no puede ser menor a 0 kWh")
            consumoCliente = readLine().toString()
            while(!validarNumero(consumoCliente.toString())){
                consumoCliente = readLine().toString()
            }
        }
        totalAPagarCliente = procesarConsumo(primeraTarifa,segundaTarifa,consumoCliente.toString().toDouble())
        numeroFactura++
    }

    fun cobroEnee() {
        do{
            if(numeroFactura>0 && nuevoRecibo ==false){
                return
            }
            ingresarDatosENEE()
            imprimirFactura()
            if(numeroFactura> 0){
                generarOtroCobro()
            }
            cobroEnee()
        }while(nuevoRecibo==true)
    }

    fun generarOtroCobro(){
        var otroCobro: String
        println("¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
        otroCobro = readLine().toString()
        while(!validarTexto(otroCobro)){
            println("¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
            otroCobro = readLine().toString()
        }
        while (!validarYN(otroCobro)){
            println("dd¿Desea generar otro cobro? Conteste con una Y para si o una N para no.")
            otroCobro = readLine().toString()
        }
        if(otroCobro.equals("Y") || otroCobro.equals("y")){
            cobroEnee()
            nuevoRecibo = true
        }
        else if (otroCobro.equals("N") || otroCobro.equals("n")){
            nuevoRecibo = false
        }
    }

    fun validarYN(texto:String):Boolean{
        if(texto.equals("Y") || texto.equals("y")){
            return true
        }else if(texto.equals("N") || texto.equals("n")){
            return true
        }
        return false
    }

    fun procesarConsumo(tarifa1:Double, tarifa2:Double, consumo:Double):Double{
        var consumoFinal:Double = 0.0
        if(consumo < 50){
            consumoFinal = consumo * tarifa1
        }else if(consumo > 50){
            var consumoTarifa2:Double
            consumoTarifa2 = consumo - 50
            consumoFinal = consumoTarifa2 * tarifa2
            consumoFinal+= (50*tarifa1)
        }
        return consumoFinal
    }

    fun imprimirFactura(){
        println("===========================================")
        println("=================FACTURA===================")
        println("Nombre del cliente: "+this.nombreCliente)
        println("Número de factura: "+this.numeroFactura)
        println("Código del cliente: "+this.codigoCliente)
        println("Dirección del cliente: "+ this.direccionCliente)
        println("Días facturados: "+this.diasFacturados)
        println("Consumo del cliente: "+this.consumoCliente + " kWh")
        println("Total a pagar: "+this.totalAPagarCliente + " L")
        println("==================FINAL===================")
        println("========================================== \n")
    }

    fun esNegativo(numero:Double):Boolean{
        if(numero < 0){
            return true
        }
        return false
    }
    fun validarTexto(texto:String):Boolean{
        var c:Char
        for(i in 1..texto.length-1){
            c = texto.get(i)
            if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ')) {
                println("Este texto contiene números, sólo se permiten letras.")
                return false;
            }
        }
        return true
    }
    fun validarNumero(texto:String):Boolean{
        try {
            texto.toInt()
            return true
        }catch (e:Exception){
            println("Solo se permiten números")
            return false;
        }
    }
}